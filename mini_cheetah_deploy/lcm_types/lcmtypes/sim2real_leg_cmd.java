/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package lcmtypes;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class sim2real_leg_cmd implements lcm.lcm.LCMEncodable
{
    public double q_des[];
    public double qd_des[];
    public double tau_ff[];
    public double kp[];
    public double kd[];
    public long timestamp_us;
    public long id;
    public long robot_id;
    public double se_contactState[];
 
    public sim2real_leg_cmd()
    {
        q_des = new double[12];
        qd_des = new double[12];
        tau_ff = new double[12];
        kp = new double[12];
        kd = new double[12];
        se_contactState = new double[4];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x6d88128ef1291cc1L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(lcmtypes.sim2real_leg_cmd.class))
            return 0L;
 
        classes.add(lcmtypes.sim2real_leg_cmd.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.q_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.qd_des[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.tau_ff[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.kp[a]); 
        }
 
        for (int a = 0; a < 12; a++) {
            outs.writeDouble(this.kd[a]); 
        }
 
        outs.writeLong(this.timestamp_us); 
 
        outs.writeLong(this.id); 
 
        outs.writeLong(this.robot_id); 
 
        for (int a = 0; a < 4; a++) {
            outs.writeDouble(this.se_contactState[a]); 
        }
 
    }
 
    public sim2real_leg_cmd(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public sim2real_leg_cmd(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static lcmtypes.sim2real_leg_cmd _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        lcmtypes.sim2real_leg_cmd o = new lcmtypes.sim2real_leg_cmd();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.q_des = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.q_des[a] = ins.readDouble();
        }
 
        this.qd_des = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.qd_des[a] = ins.readDouble();
        }
 
        this.tau_ff = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.tau_ff[a] = ins.readDouble();
        }
 
        this.kp = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.kp[a] = ins.readDouble();
        }
 
        this.kd = new double[(int) 12];
        for (int a = 0; a < 12; a++) {
            this.kd[a] = ins.readDouble();
        }
 
        this.timestamp_us = ins.readLong();
 
        this.id = ins.readLong();
 
        this.robot_id = ins.readLong();
 
        this.se_contactState = new double[(int) 4];
        for (int a = 0; a < 4; a++) {
            this.se_contactState[a] = ins.readDouble();
        }
 
    }
 
    public lcmtypes.sim2real_leg_cmd copy()
    {
        lcmtypes.sim2real_leg_cmd outobj = new lcmtypes.sim2real_leg_cmd();
        outobj.q_des = new double[(int) 12];
        System.arraycopy(this.q_des, 0, outobj.q_des, 0, 12); 
        outobj.qd_des = new double[(int) 12];
        System.arraycopy(this.qd_des, 0, outobj.qd_des, 0, 12); 
        outobj.tau_ff = new double[(int) 12];
        System.arraycopy(this.tau_ff, 0, outobj.tau_ff, 0, 12); 
        outobj.kp = new double[(int) 12];
        System.arraycopy(this.kp, 0, outobj.kp, 0, 12); 
        outobj.kd = new double[(int) 12];
        System.arraycopy(this.kd, 0, outobj.kd, 0, 12); 
        outobj.timestamp_us = this.timestamp_us;
 
        outobj.id = this.id;
 
        outobj.robot_id = this.robot_id;
 
        outobj.se_contactState = new double[(int) 4];
        System.arraycopy(this.se_contactState, 0, outobj.se_contactState, 0, 4); 
        return outobj;
    }
 
}

